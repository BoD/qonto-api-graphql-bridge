"""
The Timestamp scalar type represents the time coordinates of when a certain event
occurred, with the precision of a thousands of a second.
"""
scalar Timestamp


"""
The URL scalar type represents a Uniform Resource Locator as defined by
[RFC 1738](https://tools.ietf.org/html/rfc1738).
"""
scalar URL


"""
A system of money in general use in a particular country or region.

See [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
"""
enum Currency {
    AED
    AFN
    ALL
    AMD
    ANG
    AOA
    ARS
    AUD
    AWG
    AZN
    BAM
    BBD
    BDT
    BGN
    BHD
    BIF
    BMD
    BND
    BOB
    BOV
    BRL
    BSD
    BTN
    BWP
    BYN
    BZD
    CAD
    CDF
    CHE
    CHF
    CHW
    CLF
    CLP
    CNY
    COP
    COU
    CRC
    CUC
    CUP
    CVE
    CZK
    DJF
    DKK
    DOP
    DZD
    EGP
    ERN
    ETB
    EUR
    FJD
    FKP
    GBP
    GEL
    GHS
    GIP
    GMD
    GNF
    GTQ
    GYD
    HKD
    HNL
    HRK
    HTG
    HUF
    IDR
    ILS
    INR
    IQD
    IRR
    ISK
    JMD
    JOD
    JPY
    KES
    KGS
    KHR
    KMF
    KPW
    KRW
    KWD
    KYD
    KZT
    LAK
    LBP
    LKR
    LRD
    LSL
    LYD
    MAD
    MDL
    MGA
    MKD
    MMK
    MNT
    MOP
    MRU
    MUR
    MVR
    MWK
    MXN
    MXV
    MYR
    MZN
    NAD
    NGN
    NIO
    NOK
    NPR
    NZD
    OMR
    PAB
    PEN
    PGK
    PHP
    PKR
    PLN
    PYG
    QAR
    RON
    RSD
    RUB
    RWF
    SAR
    SBD
    SCR
    SDG
    SEK
    SGD
    SHP
    SLL
    SOS
    SRD
    SSP
    STN
    SVC
    SYP
    SZL
    THB
    TJS
    TMT
    TND
    TOP
    TRY
    TTD
    TWD
    TZS
    UAH
    UGX
    USD
    USN
    UYI
    UYU
    UYW
    UZS
    VES
    VND
    VUV
    WST
    XAF
    XAG
    XAU
    XBA
    XBB
    XBC
    XBD
    XCD
    XDR
    XOF
    XPD
    XPF
    XPT
    XSU
    XTS
    XUA
    XXX
    YER
    ZAR
    ZMW
    ZWL
}

"""
The side of a transaction (either a debit or a credit).
"""
enum TransactionSide {
    "Outgoing transaction."
    DEBIT

    "Incoming transaction."
    CREDIT
}


"""
A transaction's type of operation.
"""
enum TransactionOperationType {
    "An outgoing transfer."
    TRANSFER

    "A card payment."
    CARD

    "A SEPA Direct Debit (collecting payments from other businesses)."
    DIRECT_DEBIT

    "An incoming transfer."
    INCOME

    "A Qonto fee (subscription, atm withdrawal, fx card...)."
    QONTO_FEE

    "A Check cashed in on the account."
    CHEQUE
}


"""
Status of a transaction.
"""
enum TransactionStatus {
    PENDING
    REVERSED
    DECLINED
    COMPLETED
}


"""
Category of a transaction.
"""
enum TransactionCategory {
    ATM
    FEES
    FINANCE
    FOOD_AND_GROCERY
    GAS_STATION
    HARDWARE_AND_EQUIPMENT
    HOTEL_AND_LODGING
    INSURANCE
    IT_AND_ELECTRONICS
    LEGAL_AND_ACCOUNTING
    LOGISTICS
    MANUFACTURING
    MARKETING
    OFFICE_RENTAL
    OFFICE_SUPPLY
    ONLINE_SERVICE
    OTHER_EXPENSE
    OTHER_INCOME
    OTHER_SERVICE
    REFUND
    RESTAURANT_AND_BAR
    SALARY
    SALES
    SUBSCRIPTION
    TAX
    TRANSPORT
    TREASURY_AND_INTERCO
    UTILITY
    VOUCHER
}


"""
Possible VAT rates.
"""
enum TransactionVatRate {
    "A custom rate"
    RATE_CUSTOM

    "0%"
    RATE_ZERO

    "2.1%"
    RATE_2_1

    "5.5%"
    RATE_5_5

    "10%"
    RATE_10

    "20%"
    RATE_20
}


"""
An amount of money, among with its currency.
"""
type MonetaryAmount {
    """
    Note: the amount is represented as a String because floats are not safe to
    represent amounts of money ([more information here](https://husobee.github.io/money/float/2016/09/23/never-use-floats-for-currency.html)).
    """
    amount: String!

    currency: Currency!
}


"""
Inside Qonto, attachments are files uploaded onto transactions by users.
Attachments typically correspond to the invoice or receipt, and are used to justify
the transactions from a bookkeeping standpoint.

**Important**: for security reasons, the url you retrieve for each attachment is only
valid for 30 minutes.  If you need to download the file after more than 30 minutes,
you will need to perform another authenticated call in order to generate a new
download URL.
"""
type Attachment {
    id: ID!

    "Date when this attachment was created"
    creationDate: Timestamp!

    "File name"
    fileName: String!

    "Size in bytes"
    size: Int!

    "Content type, as defined by [RFC 2046](https://tools.ietf.org/html/rfc2046)"
    contentType: String!

    "The URL where this attachement can be downloaded (valid for 30 minutes)"
    url: URL!
}


"""
A label is piece of information that can be attached to a transaction, as a way to
help bookkeeping.

A label can be linked to another in order to create lists.
"""
type Label {
    id: ID!

    name: String!

    "Optional id of a parent label"
    parentLabelId: ID
}


"""
A member is a user who's been granted access to the Qonto account of a company.
There is no limit currently to the number of members a company can have.

Members can be the **initiator** of a transaction.

_Note: in the original Qonto REST API this is called a "membership"._
"""
type Member {
    id: ID!

    "First name"
    firstName: String!

    "Last name"
    lastName: String!
}


"""
Information about the organization.
"""
type Organization {
    id: ID!
}


"""
A bank account.

The `balance` represents the actual amount of money on the account, in Euros. The `authorizedBalance`
represents the amount available for payments, taking into account transactions that are being
processed.
[More information here](https://support.qonto.eu/hc/en-us/articles/115000493249-How-is-the-balance-of-my-account-calculated-).

"""
type BankAccount {
    id: ID!

    "IBAN"
    iban: String!

    "BIC"
    bic: String!

    currency: Currency!

    "Amount of money on the account"
    balance: MonetaryAmount!

    "Amount of money available for payment from the account"
    authorizedBalance: MonetaryAmount!
}


"""
Transactions contribute to the bank account's balances (e.g., incomes, transfers, cards).
"""
type Transaction {
    id: ID!

    """
    Amount of the transaction in the currency of the bank account (in our case, it will be
    in euros as it is our only supported bank account currency).
    """
    amount: MonetaryAmount!

    "Amount of the transaction in the foreign currency (if any)."
    localAmount: MonetaryAmount!

    attachments: [Attachment]!

    "Side of the transaction (debit or credit)"
    side: TransactionSide!

    "Operation type"
    operationType: TransactionOperationType!

    "Counterparty of the transaction (e.g: Amazon)"
    counterparty: String!

    "Date the transaction impacted the balance of the account"
    settledDate: Timestamp

    "Date at which the transaction impacted the authorized balance of the account"
    emittedDate: Timestamp!

    "Date at which the transaction was last updated"
    updatedDate: Timestamp!

    "Status"
    status: TransactionStatus!

    "Category"
    category: TransactionCategory!

    "Memo added by the user on the transaction"
    note: String

    "Message sent along `INCOME`, `TRANSFER` and `DIRECT_DEBIT` transactions"
    reference: String

    """
    Amount of VAT filled in on the transaction (or null for no VAT).
    **Do note:** If you're a user of VAT auto-detection feature, only confirmed VAT
    information will appear in the response.
    """
    vatAmount: MonetaryAmount

    "VAT rate (or null for no VAT)"
    vatRate: TransactionVatRate

    "The member who initiated the transaction"
    initiator: Member

    "Labels"
    labels: [Label]!

    "Indicates if the transaction's attachment was lost (default: false)"
    isAttachmentLost: Boolean

    "Indicates if the transaction's attachment is required (default: true)"
    isAttachmentRequired: Boolean
}


"""
A list of label.
"""
type LabelConnection {
    "A list of nodes."
    nodes: [Label]!

    "Information to aid in pagination."
    pageInfo: PageInfo!

    "Identifies the total count of items in the connection."
    totalCount: Int!
}


"""
A list of members.
"""
type MemberConnection {
    "A list of nodes."
    nodes: [Member]!

    "Information to aid in pagination."
    pageInfo: PageInfo!

    "Identifies the total count of items in the connection."
    totalCount: Int!
}


"""
A list of transactions.
"""
type TransactionConnection {
    "A list of nodes."
    nodes: [Transaction]!

    "Information to aid in pagination."
    pageInfo: PageInfo!

    "Identifies the total count of items in the connection."
    totalCount: Int!
}


"""
Information about pagination in a connection.
"""
type PageInfo {
    "Index of this page"
    pageIndex: Int!

    "Index of next page, or null if there are no more items."
    nextPageIndex: Int

    "Index of previous page, or null if this is the first page."
    previousPageIndex: Int
}


"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
    """
    Specifies an ascending order for a given `orderBy` argument.
    """
    ASC

    """
    Specifies a descending order for a given `orderBy` argument.
    """
    DESC
}


"""
Properties by which transaction connections can be ordered.
"""
enum TransactionOrderField {
    """
    Order transactions by updated date.
    """
    UPDATED_DATE

    """
    Order transactions by settled date.
    """
    SETTLED_DATE
}


"""
Ways in which lists of transactions can be ordered upon return.
"""
input TransactionsOrder {
    """
    The direction in which to order labels by the specified field.
    """
    direction: OrderDirection!

    """
    The field in which to order labels by.
    """
    field: TransactionOrderField!
}


"""
The root of all queries.
"""
type Query {
    """
    The organization of the viewer.
    """
    organization: Organization


    """
    List of all the label of the viewer's organization.
    """
    labels(
        "Index of the page to retrieve (starts at 1)."
        pageIndex: Int!

        "Number of items per page."
        itemsPerPage: Int!
    ): LabelConnection


    """
    List of all the members of the viewer's organization.
    """
    members(
        "Index of the page to retrieve (starts at 1)."
        pageIndex: Int!

        "Number of items per page."
        itemsPerPage: Int!
    ): MemberConnection


    """
    List all bank accounts of the viewer's organization.
    """
    bankAccounts: [BankAccount]

    """
    List the transactions of a bank account.
    """
    transactions(
        "The bank account to list the transactions of."
        bankAccountId: ID!

        "Only include transaction with these statuses."
        statusFilter: [TransactionStatus]! = [COMPLETED]

        "Only include transactions with an updated date later than this parameter."
        updatedDateFrom: Timestamp

        "Only include transactions with an updated date earlier than this paremeter."
        updatedDateTo: Timestamp

        "Only include transactions with a settled date later than this parameter."
        settledFrom: Timestamp

        "Only include transactions with a settled date earlier than this paremeter."
        settledTo: Timestamp

        "Index of the page to retrieve (starts at 1)."
        pageIndex: Int!

        "Number of items per page."
        itemsPerPage: Int!

        """
        Ordering options for the returned transactions.
        """
        orderBy: TransactionsOrder = { field: UPDATED_DATE, direction: DESC}
    ): TransactionConnection
}
